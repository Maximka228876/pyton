from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from datetime import datetime
from keyboards.main import (
    get_reminders_menu,
    get_delete_reminder_keyboard,
    get_cancel_keyboard,
    get_main_menu
)
from config import bot, scheduler, reminders
from states import Form
import sqlite3
from html import escape

router = Router()


# –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: Message):
    await message.answer(
        "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
        reply_markup=get_reminders_menu()
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—à–∞–≥ 1: —Ç–µ–∫—Å—Ç)
@router.callback_query(F.data == "add_reminder")
async def add_reminder_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ó–∞–∫–∞–ø–∞—Ç—å –∫–∞–ø–ª–∏'):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(Form.waiting_for_reminder_text)
    await callback.answer()


# –®–∞–≥ 2: –≤—Ä–µ–º—è
@router.message(Form.waiting_for_reminder_text)
async def process_reminder_text(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    await state.update_data(text=message.text)
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(Form.waiting_for_reminder_time)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router.message(Form.waiting_for_reminder_time)
async def process_reminder_time(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    try:
        data = await state.get_data()
        time = datetime.strptime(message.text, "%H:%M").time()
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with sqlite3.connect('bot_data.db') as conn:
            cursor = conn.execute(
                "INSERT INTO reminders (user_id, text, time, active) VALUES (?, ?, ?, ?)",
                (user_id, escape(data["text"]), time.strftime("%H:%M"), True)
            )
            reminder_id = cursor.lastrowid

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(
            send_reminder,
            trigger="cron",
            hour=time.hour,
            minute=time.minute,
            args=(user_id, data["text"]),
            id=f"reminder_{user_id}_{reminder_id}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if user_id not in reminders:
            reminders[user_id] = []
        reminders[user_id].append({
            "id": reminder_id,
            "text": data["text"],
            "time": time,
            "active": True
        })

        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time.strftime('%H:%M')}!",
            reply_markup=get_main_menu()
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")


# –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@router.callback_query(F.data == "list_reminders")
async def list_reminders(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_reminders = reminders.get(user_id, [])

    if not user_reminders:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for idx, rem in enumerate(user_reminders, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if rem["active"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
            text += f"{idx}. {rem['text']} –≤ {rem['time'].strftime('%H:%M')} ({status})\n"

        await callback.message.answer(text)
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@router.callback_query(F.data == "delete_reminder")
async def delete_reminder_menu(callback: CallbackQuery):
    await callback.message.answer(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_delete_reminder_keyboard(callback.from_user.id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_"))
async def delete_reminder(callback: CallbackQuery):
    user_id = callback.from_user.id
    idx = int(callback.data.split("_")[1])

    if user_id not in reminders or idx >= len(reminders[user_id]):
        await callback.answer("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    try:
        reminder = reminders[user_id].pop(idx)
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        with sqlite3.connect('bot_data.db') as conn:
            conn.execute(
                "DELETE FROM reminders WHERE id = ? AND user_id = ?",
                (reminder["id"], user_id)
            )
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.remove_job(f"reminder_{user_id}_{reminder['id']}")
        await callback.message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
    await callback.answer()


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_reminder(user_id: int, text: str):
    await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")


# –û–±—â–∞—è –æ—Ç–º–µ–Ω–∞
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())