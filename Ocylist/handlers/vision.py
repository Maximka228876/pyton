from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, BufferedInputFile
from keyboards.main import get_vision_test_menu, get_cancel_keyboard, get_main_menu
from config import (
    SIVTSEV_IMAGES, SIVTSEV_ANSWERS,
    COLOR_IMAGES, COLOR_ANSWERS,
    ASTIGMATISM_IMAGES, ASTIGMATISM_ANSWERS,
    bot
)
from states import Form
import os

router = Router()

@router.message(F.text == "üëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑—Ä–µ–Ω–∏–µ")
async def vision_tests(message: types.Message):
    await message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:\n"
        "1. –¢–µ—Å—Ç –Ω–∞ —á–µ—Ç–∫–æ—Å—Ç—å –∑—Ä–µ–Ω–∏—è\n"
        "2. –¢–µ—Å—Ç –Ω–∞ —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ\n"
        "3. –¢–µ—Å—Ç –Ω–∞ –∞—Å—Ç–∏–≥–º–∞—Ç–∏–∑–º",
        reply_markup=get_vision_test_menu()
    )


@router.callback_query(F.data == "test_sivtsev")
async def start_sivtsev_test(callback: CallbackQuery, state: FSMContext):
    await state.update_data(current_test_step=1, correct_answers=0, total_questions=5)
    await callback.message.answer(
        "üëÅÔ∏è –¢–µ—Å—Ç –Ω–∞ —á–µ—Ç–∫–æ—Å—Ç—å –∑—Ä–µ–Ω–∏—è:\n"
        "1. –û—Ç–æ–π–¥–∏—Ç–µ –Ω–∞ 2-3 —à–∞–≥–∞ –æ—Ç —ç–∫—Ä–∞–Ω–∞\n"
        "2. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–¥–∏–Ω –≥–ª–∞–∑\n"
        "3. –í–≤–æ–¥–∏—Ç–µ –±—É–∫–≤—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í –ë –´)",
        reply_markup=get_cancel_keyboard()
    )
    await _send_test_image(callback.from_user.id, 1)
    await state.set_state(Form.vision_test)
    await callback.answer()


@router.message(Form.vision_test)
async def process_test_answer(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ç–µ—Å—Ç
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    data = await state.get_data()
    step = data["current_test_step"]
    correct_answers = SIVTSEV_ANSWERS.get(step, [])

    user_answers = [x.upper().strip() for x in message.text.split()]
    is_correct = set(user_answers) == set(correct_answers)

    new_correct = data["correct_answers"] + (1 if is_correct else 0)
    await state.update_data(
        current_test_step=step + 1,
        correct_answers=new_correct,
        **{f"step_{step}": is_correct}
    )

    if step + 1 > data["total_questions"]:
        await _finish_test(message, state)
    else:
        await _send_test_image(message.from_user.id, step + 1)


async def _send_test_image(user_id: int, step: int):
    image_path = os.path.join("images", SIVTSEV_IMAGES[step])
    if not os.path.exists(image_path):
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞")
        return

    with open(image_path, "rb") as f:
        await bot.send_photo(
            user_id,
            BufferedInputFile(f.read(), filename=f"test_{step}.jpg"),
            caption=f"–°—Ç—Ä–æ–∫–∞ {step}. –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã:"
        )


async def _finish_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct = data["correct_answers"]
    total = data["total_questions"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for step in range(1, 6):
        result_text += f"–°—Ç—Ä–æ–∫–∞ {step}: {'‚úÖ' if data.get(f'step_{step}') else '‚ùå'}\n"

    recommendation = "üî¥ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∞!" if (correct / total < 0.6) else "üü¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ—Ä–º–µ. –ù–æ –≤—Å–µ–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∞!"

    await message.answer(
        f"{result_text}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n{recommendation}",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.callback_query(F.data == "test_color")
async def start_color_test(callback: CallbackQuery, state: FSMContext):
    await state.update_data(
        current_test_step=1,
        correct_answers=0,
        total_questions=len(COLOR_IMAGES)
    )
    await callback.message.answer(
        "üé® –¢–µ—Å—Ç –Ω–∞ —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ:\n"
        "1. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç–µ",
        reply_markup=get_cancel_keyboard()
    )
    await _send_color_image(callback.from_user.id, 1)
    await state.set_state(Form.color_test)
    await callback.answer()


@router.message(Form.color_test)
async def process_color_answer(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    data = await state.get_data()
    step = data["current_test_step"]
    correct = COLOR_ANSWERS.get(step, [])

    user_answer = message.text.strip()
    is_correct = user_answer in correct

    new_correct = data["correct_answers"] + (1 if is_correct else 0)
    await state.update_data(
        current_test_step=step + 1,
        correct_answers=new_correct,
        **{f"step_{step}": is_correct}
    )

    if step + 1 > data["total_questions"]:
        await _finish_color_test(message, state)
    else:
        await _send_color_image(message.from_user.id, step + 1)


async def _send_color_image(user_id: int, step: int):
    image_path = os.path.join("images", COLOR_IMAGES[step])
    with open(image_path, "rb") as f:
        await bot.send_photo(
            user_id,
            BufferedInputFile(f.read(), filename=f"color_{step}.jpg"),
            caption="–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã –≤–∏–¥–∏—Ç–µ?"
        )


async def _finish_color_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct = data["correct_answers"]
    total = data["total_questions"]

    result_text = "üé® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞ —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ:\n"
    for step in range(1, total + 1):
        result_text += f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {step}: {'‚úÖ' if data.get(f'step_{step}') else '‚ùå'}\n"

    recommendation = "üî¥ –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∞!" if (correct / total < 1) else "üü¢ –¶–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≤ –Ω–æ—Ä–º–µ. –ù–æ –≤—Å–µ–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∞!"

    await message.answer(
        f"{result_text}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n{recommendation}",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.callback_query(F.data == "test_astigmatism")
async def start_astigmatism_test(callback: CallbackQuery, state: FSMContext):
    await state.update_data(
        current_test_step=1,
        correct_answers=0,
        total_questions=len(ASTIGMATISM_IMAGES)
    )
    await callback.message.answer(
        "üåÄ –¢–µ—Å—Ç –Ω–∞ –∞—Å—Ç–∏–≥–º–∞—Ç–∏–∑–º:\n"
        "1. –û—Ç–æ–π–¥–∏—Ç–µ –Ω–∞ 2-3 —à–∞–≥–∞ –æ—Ç —ç–∫—Ä–∞–Ω–∞\n"
        "2. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–¥–∏–Ω –≥–ª–∞–∑\n"
        "3. –†–∞—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∏–¥–∏—Ç–µ (–µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∏–∫–∞–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø–∏—à–∏—Ç–µ '–í—Å–µ –ª–∏–Ω–∏–∏ —á–µ—Ç–∫–∏–µ' –∏–ª–∏ '–ù–µ—Ç –∏—Å–∫–∞–∂–µ–Ω–∏–π')",
        reply_markup=get_cancel_keyboard()
    )
    await _send_astigmatism_image(callback.from_user.id, 1)
    await state.set_state(Form.astigmatism_test)
    await callback.answer()


@router.message(Form.astigmatism_test)
async def process_astigmatism_answer(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    data = await state.get_data()
    step = data["current_test_step"]
    correct = ASTIGMATISM_ANSWERS.get(step, [])

    user_answer = message.text.strip().lower()
    is_correct = any(user_answer == ans.lower() for ans in correct)

    new_correct = data["correct_answers"] + (1 if is_correct else 0)
    await state.update_data(
        current_test_step=step + 1,
        correct_answers=new_correct,
        **{f"step_{step}": is_correct}
    )

    if step + 1 > data["total_questions"]:
        await _finish_astigmatism_test(message, state)
    else:
        await _send_astigmatism_image(message.from_user.id, step + 1)


async def _send_astigmatism_image(user_id: int, step: int):
    image_path = os.path.join("images", ASTIGMATISM_IMAGES[step])
    with open(image_path, "rb") as f:
        await bot.send_photo(
            user_id,
            BufferedInputFile(f.read(), filename=f"astig_{step}.jpg"),
            caption="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∏–¥–∏—Ç–µ:"
        )


async def _finish_astigmatism_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct = data["correct_answers"]
    total = data["total_questions"]

    result_text = "üåÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞ –∞—Å—Ç–∏–≥–º–∞—Ç–∏–∑–º:\n"
    for step in range(1, total + 1):
        result_text += f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {step}: {'‚úÖ' if data.get(f'step_{step}') else '‚ùå'}\n"

    recommendation = "üî¥ –í–æ–∑–º–æ–∂–µ–Ω –∞—Å—Ç–∏–≥–º–∞—Ç–∏–∑–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∞!" if (correct / total < 1) else "üü¢ –ò—Å–∫–∞–∂–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ù–æ –≤—Å–µ–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∞!"

    await message.answer(
        f"{result_text}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n{recommendation}",
        reply_markup=get_main_menu()
    )
    await state.clear()


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
